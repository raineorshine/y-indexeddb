{"version":3,"file":"y-indexeddb.cjs","sources":["../src/y-indexeddb.js"],"sourcesContent":["import * as Y from 'yjs'\nimport * as idb from 'lib0/indexeddb'\nimport { Observable } from 'lib0/observable'\n\nconst dbname = 'y-indexeddb'\nconst customStoreName = 'custom'\nconst updatesStoreName = 'updates'\n\n// A promiseed IDBDatabase connection. Opened once when first constructed, then kept open. */\n/** @type {Promise<IDBDatabase> | undefined} */\nlet dbpromise\n\n// A cached IDBDatabase instance from the resolved dbpromise. Used by synchronous functions like fetchUpdates that assume the db has already been opened.\n/** @type {IDBDatabase | undefined} */\nlet dbcached\n\nexport const PREFERRED_TRIM_SIZE = 500\n\n/**\n * Creates an IDBKeyRange for the name,id index on the updates object store that includes all updates for the Doc with the given name.\n * @param {string} name\n */\nconst keyRangeIndexAll = name => idb.createIDBKeyRangeBound([name], [name, []], false, false)\n\n/**\n * Creates an IDBKeyRange for the name,id index on the updates object store that includes updates for the Doc with the given name from the given lower bound update key to the latest update.\n * @param {string} name\n * @param {number} lower\n * @param {boolean} lowerOpen\n */\nconst keyRangeIndexLowerBound = (name, lower, lowerOpen) => idb.createIDBKeyRangeBound([name, lower], [name, []], lowerOpen, false)\n\n/**\n * Creates an IDBKeyRange for the name,id index on the updates object store that includes updates for the Doc with the given name starting from the oldest update to the given upper bound update key.\n * @param {string} name\n * @param {number} upper\n * @param {boolean} upperOpen\n */\nconst keyRangeIndexUpperBound = (name, upper, upperOpen) => idb.createIDBKeyRangeBound([name], [name, upper], false, upperOpen)\n\n/**\n * @param {IndexeddbPersistence} idbPersistence\n * @param {function(IDBObjectStore):void} [beforeApplyUpdatesCallback]\n * @param {function(IDBObjectStore):void} [afterApplyUpdatesCallback]\n */\nexport const fetchUpdates = async (idbPersistence, beforeApplyUpdatesCallback = () => {}, afterApplyUpdatesCallback = () => {}) => {\n  const [updatesStore] = idb.transact(/** @type {IDBDatabase} */ (dbcached), [updatesStoreName]) // , 'readonly')\n  const updatesIndex = updatesStore.index('name,id')\n  const updates = await idb.rtop(updatesIndex.getAll(keyRangeIndexLowerBound(idbPersistence.name, idbPersistence._dbref, false)))\n  if (!idbPersistence._destroyed) {\n    beforeApplyUpdatesCallback(updatesStore)\n    Y.transact(idbPersistence.doc, () => {\n      updates.forEach((/** @type {{ update: Uint8Array }} */record) => Y.applyUpdate(idbPersistence.doc, record.update))\n    }, idbPersistence, false)\n    afterApplyUpdatesCallback(updatesStore)\n\n    /** @type {[string, number] | undefined} */\n    const nameKeyPair = await idb.getLastKey(/** @type {any} */(updatesIndex), keyRangeIndexAll(idbPersistence.name))\n    if (!nameKeyPair) return updatesStore\n    idbPersistence._dbref = nameKeyPair[1] + 1\n\n    const count = await idb.rtop(updatesIndex.count(keyRangeIndexAll(idbPersistence.name)))\n    idbPersistence._dbsize = count\n  }\n  return updatesStore\n}\n\n/**\n * @param {IndexeddbPersistence} idbPersistence\n * @param {boolean} forceStore\n */\nexport const storeState = async (idbPersistence, forceStore = true) => {\n  const updatesStore = await fetchUpdates(idbPersistence)\n  if (forceStore || idbPersistence._dbsize >= PREFERRED_TRIM_SIZE) {\n    await idb.rtop(updatesStore.add({\n      name: idbPersistence.name,\n      update: Y.encodeStateAsUpdate(idbPersistence.doc)\n    }))\n    const updatesIndex = updatesStore.index('name,id')\n    // resolve when transaction auto-commits\n    const keys = await idb.rtop(updatesIndex.getAllKeys(keyRangeIndexUpperBound(idbPersistence.name, idbPersistence._dbref, true)))\n    keys.forEach((/** @type {number} */key) => updatesStore.delete(key))\n    const count = await idb.rtop(updatesIndex.count(keyRangeIndexAll(idbPersistence.name)))\n    idbPersistence._dbsize = count\n  }\n}\n\n/** Deletes the entire database. */\nexport const clear = async () => {\n  await idb.deleteDB(dbname)\n  dbpromise = undefined\n  dbcached = undefined\n}\n\n/** Deletes a document from the database. We need a standalone method as a way to delete a persisted Doc if there is no IndexedDBPersistence instance. If you have an IndexedDBPersistence instance, call the clearData instance methnod.\n * @param {string} name\n * */\nexport const clearDocument = async (name) => {\n  const db = await (dbpromise || idb.openDB(dbname, () => {}))\n  return new Promise((resolve, reject) => {\n    // resolve when transaction auto-commits\n    const tx = db.transaction([customStoreName, updatesStoreName], 'readwrite')\n    tx.oncomplete = resolve\n    tx.onerror = reject\n\n    // delete custom values\n    const customStore = tx.objectStore(customStoreName)\n    customStore.delete(keyRangeIndexAll(name))\n\n    // delete updates\n    const updatesStore = tx.objectStore(updatesStoreName)\n    const updatesIndex = updatesStore.index('name,id')\n\n    // get all keys from the index and then delete individually since there is no index.delete method\n    idb.rtop(updatesIndex.getAllKeys(keyRangeIndexAll(name))).then(keys => {\n      keys.forEach((/** @type {number} */key) => updatesStore.delete(key))\n    })\n  })\n}\n\n/**\n * Modified idb.openDB to pass the upgrade transaction to initDB for creating an index.\n * @param {string} name\n * @param {function(IDBDatabase, IDBTransaction):any} initDB Called when the database is first created\n * @return {Promise<IDBDatabase>}\n */\nexport const openDBWithUpgradeTransaction = (name, initDB) => new Promise((resolve, reject) => {\n  // eslint-disable-next-line\n  const request = indexedDB.open(name)\n  /**\n   * @param {any} event\n   */\n  request.onupgradeneeded = event => initDB(event.target.result, event.target.transaction)\n  /**\n   * @param {any} event\n   */\n  request.onerror = event => reject(new Error(event.target.error))\n  /**\n   * @param {any} event\n   */\n  request.onsuccess = event => {\n    /**\n     * @type {IDBDatabase}\n     */\n    const db = event.target.result\n    db.onversionchange = () => { db.close() }\n\n    if (typeof addEventListener !== 'undefined') {\n      // eslint-disable-next-line\n      addEventListener('unload', () => db.close())\n    }\n    resolve(db)\n  }\n})\n\n/**\n * @extends Observable<string>\n */\nexport class IndexeddbPersistence extends Observable {\n  /**\n   * @param {string} name\n   * @param {Y.Doc} doc\n   */\n  constructor (name, doc) {\n    super()\n    this.doc = doc\n    this.name = name\n    this._dbref = 0\n    this._dbsize = 0\n    this._destroyed = false\n    this.created = false\n    this.synced = false\n\n    dbpromise = dbpromise || openDBWithUpgradeTransaction(dbname, (db, tx) => {\n      idb.createStores(db, [\n        [customStoreName],\n        [updatesStoreName, { autoIncrement: true, keyPath: 'id' }]\n      ])\n      const updatesStore = tx.objectStore(updatesStoreName)\n      updatesStore.createIndex('name,id', ['name', 'id'])\n    }).then(db => {\n      dbcached = db\n      return db\n    })\n\n    /**\n     * @type {Promise<IndexeddbPersistence>}\n     */\n    this.whenSynced = dbpromise.then(() => {\n      this.created = true\n      /**\n       * @param {IDBObjectStore} updatesStore\n       */\n      const beforeApplyUpdatesCallback = (updatesStore) => {\n        const update = Y.encodeStateAsUpdate(doc)\n\n        // do not save empty update\n        return update.length > 2\n          ? idb.rtop(updatesStore.add({ name: this.name, update }))\n          : null\n      }\n\n      const afterApplyUpdatesCallback = () => {\n        if (this._destroyed) return this\n        this.synced = true\n        this.emit('synced', [this])\n\n        // compact database after initial sync to avoid continuous growth\n        this.storeStateDebounced(true)\n      }\n\n      return fetchUpdates(this, beforeApplyUpdatesCallback, afterApplyUpdatesCallback).then(() => this)\n    })\n\n    /**\n     * Timeout in ms until data is merged and persisted in idb.\n     */\n    this._storeTimeout = 1000\n\n    /**\n     * @type {any}\n     */\n    this._storeTimeoutId = null\n\n    /**\n     * @param {boolean} forceStore\n     */\n    this.storeStateDebounced = (forceStore = true) => {\n      if (forceStore || this._dbsize >= PREFERRED_TRIM_SIZE) {\n        if (this._storeTimeoutId !== null) {\n          clearTimeout(this._storeTimeoutId)\n        }\n        this._storeTimeoutId = setTimeout(() => {\n          storeState(this, forceStore)\n          this._storeTimeoutId = null\n        }, this._storeTimeout)\n      }\n    }\n\n    /**\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._storeUpdate = (update, origin) => {\n      if (origin !== this && this.created) {\n        const [updatesStore] = idb.transact(/** @type {IDBDatabase} */ (dbcached), [updatesStoreName])\n        idb.rtop(updatesStore.add({ name: this.name, update }))\n        this._dbsize++\n        this.storeStateDebounced(false)\n      }\n    }\n    doc.on('update', this._storeUpdate)\n    this.destroy = this.destroy.bind(this)\n    doc.on('destroy', this.destroy)\n  }\n\n  destroy () {\n    if (this._storeTimeoutId) {\n      clearTimeout(this._storeTimeoutId)\n    }\n    this.doc.off('update', this._storeUpdate)\n    this.doc.off('destroy', this.destroy)\n    this._destroyed = true\n  }\n\n  /**\n   * Destroys this instance and removes the object stores from indexeddb.\n   *\n   * @return {Promise<void>}\n   */\n  async clearData () {\n    this.destroy()\n    return clearDocument(this.name)\n  }\n\n  /**\n   * @param {String | number | ArrayBuffer | Date} key\n   * @return {Promise<String | number | ArrayBuffer | Date | any>}\n   */\n  async get (key) {\n    const db = await (/** @type {Promise<IDBDatabase>} */(dbpromise))\n    const [custom] = idb.transact(db, [customStoreName], 'readonly')\n    const { value } = await idb.rtop(custom.get([this.name, key]))\n    return value\n  }\n\n  /**\n   * @param {String | number | ArrayBuffer | Date} key\n   * @param {String | number | ArrayBuffer | Date} value\n   * @return {Promise<String | number | ArrayBuffer | Date>}\n   */\n  async set (key, value) {\n    const db = await (/** @type {Promise<IDBDatabase>} */(dbpromise))\n    const [custom] = idb.transact(db, [customStoreName])\n    return idb.rtop(custom.put({ name: this.name, value }, [this.name, key]))\n  }\n\n  /**\n   * @param {String | number | ArrayBuffer | Date} key\n   * @return {Promise<undefined>}\n   */\n  async del (key) {\n    const db = await (/** @type {Promise<IDBDatabase>} */(dbpromise))\n    const [custom] = idb.transact(db, [customStoreName])\n    return idb.del(custom, [this.name, key])\n  }\n}\n"],"names":["idb.createIDBKeyRangeBound","idb.transact","idb.rtop","Y.transact","Y.applyUpdate","idb.getLastKey","Y.encodeStateAsUpdate","idb.deleteDB","idb.openDB","Observable","idb.createStores","idb.del"],"mappings":"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"}